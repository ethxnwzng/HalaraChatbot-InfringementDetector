"""
NOTE: This file has been sanitized for portfolio display.
Replace placeholder values with actual credentials for production use.
"""

"""
Django settings for lark project.

Generated by 'django-admin startproject' using Django 3.1.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""
import os
from pathlib import Path
from dotenv import load_dotenv

# Load environment variables from .env file
load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve(strict=True).parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '#+11^xdd_#0a-cv!t1w)39&tvb4)cs@9td4ps-ys-o-aufl1f9'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']

IS_PROD = os.getenv('DFS_CLUSTER_ENVIRONMENT') == 'c2'

# db links
DB_LINK_GOODS_CENTER = 'mysql://user:password@host:port/database'
if not IS_PROD:
    DB_LINK_GOODS_CENTER = 'mysql://user:password@host:port/database'

# Redis Configuration
REDIS_HOST = os.getenv('REDIS_HOST', '127.0.0.1')
REDIS_PORT = int(os.getenv('REDIS_PORT', 6379))
REDIS_PASSWORD = os.getenv('REDIS_PASSWORD', '')

# Crawler Configuration
# Lark API credentials for spreadsheet operations
LARK_SHEET_TOKEN = os.getenv('LARK_SHEET_TOKEN')
LARK_APP_ID = os.getenv('LARK_APP_ID')
LARK_APP_SECRET = os.getenv('LARK_APP_SECRET')

# OpenAI API key for infringement analysis
OPENAI_API_KEY = os.getenv('OPENAI_API_KEY')

# Crawler-specific settings
HALARA_SHEET_STRATEGY = os.getenv('HALARA_SHEET_STRATEGY', 'new_sheet')
HALARA_TARGET_SHEET = os.getenv('HALARA_TARGET_SHEET', 'Halara_Analysis')
PRESERVE_CRAWLER_JSON = os.getenv('PRESERVE_CRAWLER_JSON', 'false').lower() == 'true'

# Database Configuration
# Each database has its own configuration section for clarity
# Main Database
DB_CONFIG = {
    'HOST': os.getenv('DB_HOST', '127.0.0.1'),
    'USER': os.getenv('DB_USER', 'root'),
    'PASS': os.getenv('DB_PASS', ''),
    'OPTIONS': {'charset': 'utf8mb4'},
    'PORT': '3306',
}

# Material Database
MATERIAL_DB_CONFIG = {
    'HOST': os.getenv('DB_HOST_MATERIAL', '127.0.0.1'),
    'USER': os.getenv('DB_USER_MATERIAL', 'root'),
    'PASS': os.getenv('DB_PASS_MATERIAL', ''),
    'NAME': os.getenv('DB_NAME_MATERIAL', 'material'),
    'OPTIONS': {'charset': 'utf8mb4'},
    'PORT': '3306',
}

# Chat History Database
CHAT_DB_CONFIG = {
    'HOST': os.getenv('DB_HOST_CHAT', '127.0.0.1'),
    'USER': os.getenv('DB_USER_CHAT', 'root'),
    'PASS': os.getenv('DB_PASS_CHAT', ''),
    'NAME': os.getenv('DB_NAME_CHAT', 'lark_chat'),
    'OPTIONS': {'charset': 'utf8mb4'},
    'PORT': '3306',
}

GOODS_CENTER_DB_CONFIG = {
    'HOST': 'cn-qa-1.db.doublefs.com' if not IS_PROD else 'cn-prod-1-ro-1.db.doublefs.com',
    'USER': 'goods_center' if not IS_PROD else 'goods_center_ro',
    'PASS': 'wEJj!X]KQo>sWDIubq,F' if not IS_PROD else 'LnE4DuoCDYdbjmAH',
    'NAME': 'goods_center',
    'OPTIONS': {'charset': 'utf8mb4'},
    'PORT': '3306',
}

# Production overrides
if IS_PROD:
    DB_CONFIG.update({
        'HOST': 'us-prod-1.db.doublefs.com',
        'USER': 'common_rw',
        'PASS': 'B[[wX>QS6gvup4/o%(_+',
    })
    
    MATERIAL_DB_CONFIG.update({
        'HOST': 'cn-growth-1.db.doublefs.com',
        'USER': 'material_rw',
        'PASS': 'vW{:M:[l%S@QpyM+HltH',
        'NAME': 'material',
    })
    
    CHAT_DB_CONFIG.update({
        'HOST': 'us-prod-1.db.doublefs.com',
        'USER': 'common_rw',
        'PASS': 'B[[wX>QS6gvup4/o%(_+',  # Using the same password as common_rw
        'NAME': 'common',
    })
    
    REDIS_HOST = 'us-common-1.cache.doublefs.com'

# Database configuration
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'common',
        'USER': DB_CONFIG['USER'],
        'PASSWORD': DB_CONFIG['PASS'],
        'HOST': DB_CONFIG['HOST'],
        'PORT': DB_CONFIG['PORT'],
        'OPTIONS': DB_CONFIG['OPTIONS'],
    },
    'material': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': MATERIAL_DB_CONFIG['NAME'],
        'USER': MATERIAL_DB_CONFIG['USER'],
        'PASSWORD': MATERIAL_DB_CONFIG['PASS'],
        'HOST': MATERIAL_DB_CONFIG['HOST'],
        'PORT': MATERIAL_DB_CONFIG['PORT'],
        'OPTIONS': MATERIAL_DB_CONFIG['OPTIONS'],
    },
    'chat_history': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': CHAT_DB_CONFIG['NAME'],
        'USER': CHAT_DB_CONFIG['USER'],
        'PASSWORD': CHAT_DB_CONFIG['PASS'],
        'HOST': CHAT_DB_CONFIG['HOST'],
        'PORT': CHAT_DB_CONFIG['PORT'],
        'OPTIONS': CHAT_DB_CONFIG['OPTIONS'],
        'CONN_MAX_AGE': 60,  # Connection pooling for chat history
        'TEST': {
            'MIRROR': 'default',  # Use default DB for testing
        },
    },
    'goods_center': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': GOODS_CENTER_DB_CONFIG['NAME'],
        'USER': GOODS_CENTER_DB_CONFIG['USER'],
        'PASSWORD': GOODS_CENTER_DB_CONFIG['PASS'],
        'HOST': GOODS_CENTER_DB_CONFIG['HOST'],
        'OPTIONS': CHAT_DB_CONFIG['OPTIONS'],
    }
}

# Database routers
DATABASE_ROUTERS = [
    'home.routers.ChatHistoryRouter',  # Router for chat history models
    'home.routers.MaterialRouter',     # Router for material models
]

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'home'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'lark.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'lark.wsgi.application'


# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_URL = '/static/'